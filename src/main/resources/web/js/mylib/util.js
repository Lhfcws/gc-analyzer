// Generated by CoffeeScript 1.12.2
var Util;

Util = (function() {
  function Util() {}

  Util.getColor = function(h) {
    var colors, i;
    colors = ['#c23531', '#2f4554', '#61a0a8', '#d48265', '#91c7ae', '#749f83', '#ca8622', '#bda29a', '#6e7074', '#546570', '#c4ccd3'];
    i = h % colors.length;
    return colors[i];
  };

  Util.ajaxPost = function(url, formData, renderer) {
    return jQuery.ajax({
      url: url,
      type: 'POST',
      cache: false,
      data: formData,
      success: function(data) {
        return renderer(data);
      },
      error: function(e) {
        return alert('ERROR POST : ' + e);
      }
    });
  };

  Util.ajaxGet = function(url, renderer) {
    return jQuery.ajax({
      url: url,
      type: 'GET',
      cache: false,
      success: function(data) {
        return renderer(data);
      },
      error: function(e) {
        return alert('ERROR GET : ' + e);
      }
    });
  };

  Util.formatDuration = function(ts) {
    var day, hour, minute, ms, ref, ret, second;
    ref = [0, 0, 0], day = ref[0], hour = ref[1], minute = ref[2];
    ms = ts % 1000;
    ts = Math.floor(ts / 1000);
    if (ts >= 86400) {
      day = Math.floor(ts / 86400);
    }
    ts %= 86400;
    if (ts >= 3600) {
      hour = Math.floor(ts / 3600);
    }
    ts %= 3600;
    if (ts >= 60) {
      minute = Math.floor(ts / 60);
    }
    ts %= 60;
    second = ts;
    ret = [];
    if (day > 0) {
      ret.push(day + " Day");
    }
    if (hour > 0) {
      ret.push(hour + " Hour");
    }
    if (minute > 0) {
      ret.push(minute + " Min");
    }
    if (second > 0) {
      ret.push(second + " Sec");
    }
    if (ms > 0) {
      ret.push(ms + " MilliSec");
    }
    return ret.join(", ");
  };

  Util.mapToXYData = function(obj) {
    var key, value, xData, yData;
    xData = [];
    yData = [];
    for (key in obj) {
      value = obj[key];
      xData.push(key);
      yData.push(value);
    }
    return [xData, yData];
  };

  Util.mapToTable = function(obj) {
    var key, results, value;
    results = [];
    for (key in obj) {
      value = obj[key];
      results.push([key, value]);
    }
    return results;
  };

  Util.mergeObject = function(obj1, obj2) {
    var attrname, obj, v;
    obj = {};
    for (attrname in obj1) {
      v = obj1[attrname];
      obj[attrname] = v;
    }
    for (attrname in obj2) {
      v = obj2[attrname];
      obj[attrname] = v;
    }
    return obj;
  };

  Util.mergeObject = function(obj1, obj2, obj3) {
    var attrname, obj, v;
    obj = {};
    for (attrname in obj1) {
      v = obj1[attrname];
      obj[attrname] = v;
    }
    for (attrname in obj2) {
      v = obj2[attrname];
      obj[attrname] = v;
    }
    for (attrname in obj3) {
      v = obj3[attrname];
      obj[attrname] = v;
    }
    return obj;
  };

  return Util;

})();
