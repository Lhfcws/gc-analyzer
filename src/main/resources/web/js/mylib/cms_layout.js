// Generated by CoffeeScript 1.12.2
var Main;

Main = (function() {
  function Main() {}

  Main.cms_layout = function(ct, ajaxData) {
    var data, gcDuration, i, k, key, len, lo, makeHeapLineOptions, name, o, ref, ref1, ref2, rowCMS, rowGC, rowHeap, rowSummary, rows, tbl, v, xd, ya, yd;
    if (ajaxData["_meta"]["gctype"] !== "CMS") {
      console.log("Not a CMS GC analysis report");
      return ct;
    }
    rows = [];
    key = "Summary";
    if (ajaxData[key]) {
      ajaxData[key]["duration"] = Util.formatDuration(ajaxData[key]["duration"]);
      rowSummary = new Row(key, "fa fa-navicon", ajaxData[key]["_comments"]);
      data = Util.mapToTable(ajaxData[key]);
      tbl = new TableOption("", false, data);
      rowSummary.append(new Col(key, 12, tbl.template()));
      rows.push(rowSummary);
    }
    key = "JVM Heap";
    if (ajaxData[key]) {
      rowHeap = new Row(key, "fa fa-industry", ajaxData[key]["_comments"]);
      name = "summary";
      ref = StackBarOption.extractFromObject(ajaxData[key][name]), xd = ref[0], yd = ref[1], ya = ref[2];
      rowHeap.append(new Col(name, 12, new StackBarOption(name, xd, yd, ya).template()));
      makeHeapLineOptions = function(name) {
        var lo, ref1;
        if (ajaxData[key][name]) {
          lo = new LineOptions(true);
          ref1 = Util.mapToXYData(ajaxData[key][name]), xd = ref1[0], yd = ref1[1];
          lo.addOption(new LineOption("allocated", "line", ajaxData[key][name]["xdata"], ajaxData[key][name]["allocated"]));
          lo.addOption(new LineOption("Before GC", "line", ajaxData[key][name]["xdata"], ajaxData[key][name]["Before GC"]));
          lo.addOption(new LineOption("After GC", "line", ajaxData[key][name]["xdata"], ajaxData[key][name]["After GC"]));
          return rowHeap.append(new Col(name, 12, lo.template()));
        }
      };
      makeHeapLineOptions("YoungGen");
      makeHeapLineOptions("OldGen");
      makeHeapLineOptions("Heap");
      rows.push(rowHeap);
    }
    key = "GC Stats";
    if (ajaxData[key]) {
      rowGC = new Row(key, "fa fa-eraser", ajaxData[key]["_comments"]);
      lo = new LineOptions(true);
      gcDuration = ajaxData[key]["GC Duration"];
      name = "YoungGen";
      lo.addOption(new LineOption(name, "line", gcDuration[name]["xdata"], gcDuration[name]["mb"]));
      name = "OldGen";
      lo.addOption(new LineOption(name, "line", gcDuration[name]["xdata"], gcDuration[name]["mb"]));
      rowGC.append(new Col("GC Duration", 12, lo.template()));
      ref1 = ["Total GC Stats", "Minor GC Stats", "Full GC Stats", "Paused GC Stats"];
      for (i = 0, len = ref1.length; i < len; i++) {
        name = ref1[i];
        data = Util.mapToTable(ajaxData[key][name]);
        rowGC.append(new Col(name, 3, new TableOption("", false, data).template()));
      }
      rows.push(rowGC);
    }
    key = "CMS Stats";
    if (ajaxData[key]) {
      rowCMS = new Row(key, "fa fa-paint-brush", ajaxData[key]["_comments"]);
      o = {};
      ref2 = ajaxData[key];
      for (k in ref2) {
        v = ref2[k];
        if (k !== "_comments") {
          o[k] = Util.mapToXYData(v);
        }
      }
      name = "Total Time";
      if (o[name]) {
        rowCMS.append(new Col(name, 5, new PieOption(name, "pie", o[name][0], o[name][1]).setOtherSettings({
          grid: {
            left: '30%'
          }
        }).template()));
      }
      name = "Avg Time";
      if (o[name]) {
        rowCMS.append(new Col(name, 7, new BarOption(name, "bar", o[name][0], o[name][1]).setOtherSettings({
          grid: {
            left: '30%'
          }
        }).template()));
      }
      name = "CMS Total Pause Time";
      if (o[name]) {
        rowCMS.append(new Col(name, 5, new PieOption(name, "pie", o[name][0], o[name][1]).template()));
      }
      name = "CMS Avg Pause Time";
      if (o[name]) {
        rowCMS.append(new Col(name, 7, new BarOption(name, "bar", o[name][0], o[name][1]).template()));
      }
      rows.push(rowCMS);
    }
    Main.appendToContainer(ct, rows);
    return Main.renderAll(ct, rows);
  };

  Main.appendToContainer = function(container, rows) {
    var i, len, row, rowHtml;
    for (i = 0, len = rows.length; i < len; i++) {
      row = rows[i];
      rowHtml = row.toHtml();
      console.log(rowHtml);
      container.append(rowHtml);
    }
    return container;
  };

  Main.renderAll = function(container, rows) {
    var i, len, results, row;
    results = [];
    for (i = 0, len = rows.length; i < len; i++) {
      row = rows[i];
      results.push(row.render());
    }
    return results;
  };

  return Main;

})();
